generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_DATABASE_URL")
}

enum RelationTypeEnum {
  parent_child
  depends_on
  linked
  reference
  example_of
  contradicts
  supports
  custom
}

model cards {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  note_id        Int              @db.UnsignedInt
  user_id        Int              @db.UnsignedInt
  title          String           @db.VarChar(255)
  description    String?          @db.Text
  due_date       DateTime?        @db.Date
  interval       Int              @default(0)
  ease_factor    Decimal          @default(2.50) @db.Decimal(5, 2)
  repetitions    Int              @default(0)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(now()) @db.DateTime(0)
  notes          notes            @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cards_note")
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cards_user")
  review_history review_history[]

  @@index([note_id], map: "fk_cards_note_idx")
  @@index([user_id], map: "fk_cards_user_idx")
}

model relations {
  id                              Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id                         Int      @db.UnsignedInt
  source_note_id                    Int      @db.UnsignedInt
  target_note_id                      Int      @db.UnsignedInt
  created_at                      DateTime @default(now()) @db.DateTime(0)
  source_note   notes  @relation("SourceNoteRelations", fields: [source_note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  target_note   notes  @relation("TargetNoteRelations", fields: [target_note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_relations_user")
  relation_types RelationType[]

  @@index([source_note_id], name: "source_note_id_idx")
  @@index([target_note_id], name: "target_note_id_idx")
  @@index([user_id], name: "user_id_idx")
}

model RelationType {
  id            Int        @id @default(autoincrement()) @db.UnsignedInt
  relation_id   Int        @db.UnsignedInt
  type          RelationTypeEnum
  relation      relations  @relation(fields: [relation_id], references: [id], onDelete: Cascade)
  created_at    DateTime   @default(now()) @db.DateTime(0)


  @@unique([relation_id, type], name: "relation_type_unique")
}

model notes {
  id                              Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id                         Int      @db.UnsignedInt
  title                           String   @db.VarChar(255)
  content                         String?  @db.Text
  created_at                      DateTime @default(now()) @db.DateTime(0)
  updated_at                      DateTime @default(now()) @db.DateTime(0)
  cards                           cards[]
  source_relations   relations[]  @relation("SourceNoteRelations")
  target_relations   relations[]  @relation("TargetNoteRelations")
  users                           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notes_user")

  @@index([user_id], map: "user_id_idx")
}

model review_history {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  card_id       Int      @db.UnsignedInt
  user_id       Int      @db.UnsignedInt
  review_date   DateTime @default(now()) @db.DateTime(0)
  quality       Int
  interval      Int
  ease_factor   Decimal  @db.Decimal(5, 2)
  next_due_date DateTime @db.Date
  cards         cards    @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_review_history_card")
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")

  @@index([card_id], map: "fk_review_history_card_idx")
  @@index([user_id], map: "user_id_idx")
}

model users {
  id             Int              @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  email          String           @unique(map: "email_UNIQUE") @db.VarChar(255)
  password_hash  String           @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(now()) @db.DateTime(0)
  cards          cards[]
  relations      relations[]
  notes          notes[]
  review_history review_history[]
}
