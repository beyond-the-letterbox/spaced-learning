generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_DATABASE_URL")
}

model cards {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  note_id        Int              @db.UnsignedInt
  user_id        Int              @db.UnsignedInt
  due_date       DateTime?        @db.Date
  interval       Int              @default(0)
  ease_factor    Decimal          @default(2.50) @db.Decimal(5, 2)
  repetitions    Int              @default(0)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(now()) @db.DateTime(0)
  notes          notes            @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cards_note")
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cards_user")
  review_history review_history[]

  @@index([note_id], map: "fk_cards_note_idx")
  @@index([user_id], map: "fk_cards_user_idx")
}

model edges {
  id                              Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id                         Int      @db.UnsignedInt
  from_note_id                    Int      @db.UnsignedInt
  to_node_id                      Int      @db.UnsignedInt
  relation_type                   String   @db.VarChar(50)
  created_at                      DateTime @default(now()) @db.DateTime(0)
  notes_edges_from_note_idTonotes notes    @relation("edges_from_note_idTonotes", fields: [from_note_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edges_from_note")
  notes_edges_to_node_idTonotes   notes    @relation("edges_to_node_idTonotes", fields: [to_node_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edges_to_note")
  users                           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edges_user")

  @@index([from_note_id], map: "from_note_id_idx")
  @@index([to_node_id], map: "to_note_id_idx")
  @@index([user_id], map: "user_id_idx")
}

model notes {
  id                              Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id                         Int      @db.UnsignedInt
  title                           String   @db.VarChar(255)
  content                         String?  @db.Text
  created_at                      DateTime @default(now()) @db.DateTime(0)
  updated_at                      DateTime @default(now()) @db.DateTime(0)
  cards                           cards[]
  edges_edges_from_note_idTonotes edges[]  @relation("edges_from_note_idTonotes")
  edges_edges_to_node_idTonotes   edges[]  @relation("edges_to_node_idTonotes")
  users                           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notes_user")

  @@index([user_id], map: "user_id_idx")
}

model review_history {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  card_id       Int      @db.UnsignedInt
  user_id       Int      @db.UnsignedInt
  review_date   DateTime @default(now()) @db.DateTime(0)
  quality       Int
  interval      Int
  ease_factor   Decimal  @db.Decimal(5, 2)
  next_due_date DateTime @db.Date
  cards         cards    @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_review_history_card")
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")

  @@index([card_id], map: "fk_review_history_card_idx")
  @@index([user_id], map: "user_id_idx")
}

model users {
  id             Int              @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  email          String           @unique(map: "email_UNIQUE") @db.VarChar(255)
  password_hash  String           @db.VarChar(255)
  name           String?          @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(now()) @db.DateTime(0)
  cards          cards[]
  edges          edges[]
  notes          notes[]
  review_history review_history[]
}
